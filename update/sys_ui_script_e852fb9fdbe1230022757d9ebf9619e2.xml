<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <name>x_si_abe.ngAbe</name>
        <script><![CDATA[var ngAbe = angular.module('ngAbe', [])
    .service('NgAbeTransport', function ($rootScope, $http, ngAbeControl) {

        let token = false;

        function saveVar(sassVar, sassVal) {

            $rootScope.$broadcast('abe.save.start');

            $http.post('/api/x_si_abe/abe/var/save', {
                portalId: ngAbeControl.getPortal().sysId,
                groupId: ngAbeControl.getGroup().sysId,
                sassVar: sassVar,
                sassVal: sassVal
            }).then(function (r) {
                $rootScope.$broadcast('abe.save.complete');
                ngAbeControl.initGroups(r.data.result);
            });
        }

        function saveField(table, document, field, value) {

            $rootScope.$broadcast('abe.save.start');

            $http.post('/api/x_si_abe/abe/field/save', {
                portalId: ngAbeControl.getPortal().sysId,
                groupId: ngAbeControl.getGroup().sysId,
                table: table,
                document: document,
                field: field,
                value: value
            }).then(function (r) {
                $rootScope.$broadcast('abe.save.complete');
            });
        }

        function setToken (t) {
            token = t;
        }

        function getToken (t) {
            return token;
        }

        return {
            getToken: getToken,
            setToken: setToken,
            saveVar: saveVar,
            saveField: saveField
        };
    })
    .service('ngAbeControl', function ($location) {

        let portalWatchers = [];
        let groupWatchers = [];


        let portals = false;
        let groups = false;
        let portal = false;
        let group = false;

        if ($location.search().spa !== '1') {
            $location.search('spa', 1)
        }

        function getPortal() {
            return portal;
        }

        function getPortals() {
            return portals;
        }

        function isInit() {
            return groups && groups && portals && portal;
        }

        function initPortals(p) {

            portals = p;

            portals.find(function (cv) {
                if (cv.selected) {
                    setPortal(cv);
                }
            });
        }

        function initGroups(g) {
            groups = g;

            group = groups.find(function (cv) {
                return cv.selected;
            });
        }

        function getGroups() {
            return groups;
        }

        function setPortal(p) {

            portal = p;

            if ($location.search().sys_id !== portal.sysId) {

                $location.search('sys_id', portal.sysId);

                if (p.defaultGroup) {
                    group = p.defaultGroup;
                    $location.search('group_id', group.sysId);
                }

                portalWatchers.forEach(function (cv) {
                    cv(portal);
                });
            }
        }

        function setGroup(g) {

            groups.forEach(function (cv) {
                cv.selected = g.sysId === cv.sysId;
            });

            group = g;

            $location.search('group_id', group.sysId);

            groupWatchers.forEach(function (cv) {
                cv(group);
            });
        }

        function getGroup() {
            return group;
        }

        function setPortalWatcher(func) {
            portalWatchers.push(func);
        }

        function setGroupWatcher(func) {
            groupWatchers.push(func);
        }

        return {
            isInit: isInit,
            setPortal: setPortal,
            setGroup: setGroup,
            getGroup: getGroup,
            setPortalWatcher: setPortalWatcher,
            setGroupWatcher: setGroupWatcher,
            getPortal: getPortal,
            getPortals: getPortals,
            initPortals: initPortals,
            initGroups: initGroups,
            getGroups: getGroups
        };

    })
    .service('ngAbeHighlighter', function () {

        var func;

        function init(f) {
            func = f;
        }

        function activate(selector) {
            return func(selector);
        }

        return {
            activate: activate,
            init: init
        };
    });]]></script>
        <script_name>ngAbe</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-11-09 04:10:00</sys_created_on>
        <sys_id>e852fb9fdbe1230022757d9ebf9619e2</sys_id>
        <sys_mod_count>222</sys_mod_count>
        <sys_name>x_si_abe.ngAbe</sys_name>
        <sys_package display_value="Advanced Branding Editor" source="x_si_abe">d5e53253db21230022757d9ebf9619b4</sys_package>
        <sys_policy/>
        <sys_scope display_value="Advanced Branding Editor">d5e53253db21230022757d9ebf9619b4</sys_scope>
        <sys_update_name>sys_ui_script_e852fb9fdbe1230022757d9ebf9619e2</sys_update_name>
        <sys_updated_by>dylan.lindgren</sys_updated_by>
        <sys_updated_on>2019-01-07 04:08:00</sys_updated_on>
        <ui_type>1</ui_type>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
